{"version":3,"file":"glob.js","sources":["../node_modules/fs.realpath/old.js","../node_modules/fs.realpath/index.js","../node_modules/concat-map/index.js","../node_modules/balanced-match/index.js","../node_modules/brace-expansion/index.js","../node_modules/minimatch/minimatch.js","../node_modules/inherits/inherits_browser.js","../node_modules/path-is-absolute/index.js","../src/common.js","../src/sync.js","../node_modules/wrappy/wrappy.js","../node_modules/once/once.js","../node_modules/inflight/inflight.js","../src/glob.js"],"sourcesContent":["// Copyright Joyent, Inc. and other Node contributors.\n//\n// Permission is hereby granted, free of charge, to any person obtaining a\n// copy of this software and associated documentation files (the\n// \"Software\"), to deal in the Software without restriction, including\n// without limitation the rights to use, copy, modify, merge, publish,\n// distribute, sublicense, and/or sell copies of the Software, and to permit\n// persons to whom the Software is furnished to do so, subject to the\n// following conditions:\n//\n// The above copyright notice and this permission notice shall be included\n// in all copies or substantial portions of the Software.\n//\n// THE SOFTWARE IS PROVIDED \"AS IS\", WITHOUT WARRANTY OF ANY KIND, EXPRESS\n// OR IMPLIED, INCLUDING BUT NOT LIMITED TO THE WARRANTIES OF\n// MERCHANTABILITY, FITNESS FOR A PARTICULAR PURPOSE AND NONINFRINGEMENT. IN\n// NO EVENT SHALL THE AUTHORS OR COPYRIGHT HOLDERS BE LIABLE FOR ANY CLAIM,\n// DAMAGES OR OTHER LIABILITY, WHETHER IN AN ACTION OF CONTRACT, TORT OR\n// OTHERWISE, ARISING FROM, OUT OF OR IN CONNECTION WITH THE SOFTWARE OR THE\n// USE OR OTHER DEALINGS IN THE SOFTWARE.\n\nvar pathModule = require('path');\nvar isWindows = process.platform === 'win32';\nvar fs = require('fs');\n\n// JavaScript implementation of realpath, ported from node pre-v6\n\nvar DEBUG = process.env.NODE_DEBUG && /fs/.test(process.env.NODE_DEBUG);\n\nfunction rethrow() {\n  // Only enable in debug mode. A backtrace uses ~1000 bytes of heap space and\n  // is fairly slow to generate.\n  var callback;\n  if (DEBUG) {\n    var backtrace = new Error;\n    callback = debugCallback;\n  } else\n    callback = missingCallback;\n\n  return callback;\n\n  function debugCallback(err) {\n    if (err) {\n      backtrace.message = err.message;\n      err = backtrace;\n      missingCallback(err);\n    }\n  }\n\n  function missingCallback(err) {\n    if (err) {\n      if (process.throwDeprecation)\n        throw err;  // Forgot a callback but don't know where? Use NODE_DEBUG=fs\n      else if (!process.noDeprecation) {\n        var msg = 'fs: missing callback ' + (err.stack || err.message);\n        if (process.traceDeprecation)\n          console.trace(msg);\n        else\n          console.error(msg);\n      }\n    }\n  }\n}\n\nfunction maybeCallback(cb) {\n  return typeof cb === 'function' ? cb : rethrow();\n}\n\nvar normalize = pathModule.normalize;\n\n// Regexp that finds the next partion of a (partial) path\n// result is [base_with_slash, base], e.g. ['somedir/', 'somedir']\nif (isWindows) {\n  var nextPartRe = /(.*?)(?:[\\/\\\\]+|$)/g;\n} else {\n  var nextPartRe = /(.*?)(?:[\\/]+|$)/g;\n}\n\n// Regex to find the device root, including trailing slash. E.g. 'c:\\\\'.\nif (isWindows) {\n  var splitRootRe = /^(?:[a-zA-Z]:|[\\\\\\/]{2}[^\\\\\\/]+[\\\\\\/][^\\\\\\/]+)?[\\\\\\/]*/;\n} else {\n  var splitRootRe = /^[\\/]*/;\n}\n\nexports.realpathSync = function realpathSync(p, cache) {\n  // make p is absolute\n  p = pathModule.resolve(p);\n\n  if (cache && Object.prototype.hasOwnProperty.call(cache, p)) {\n    return cache[p];\n  }\n\n  var original = p,\n      seenLinks = {},\n      knownHard = {};\n\n  // current character position in p\n  var pos;\n  // the partial path so far, including a trailing slash if any\n  var current;\n  // the partial path without a trailing slash (except when pointing at a root)\n  var base;\n  // the partial path scanned in the previous round, with slash\n  var previous;\n\n  start();\n\n  function start() {\n    // Skip over roots\n    var m = splitRootRe.exec(p);\n    pos = m[0].length;\n    current = m[0];\n    base = m[0];\n    previous = '';\n\n    // On windows, check that the root exists. On unix there is no need.\n    if (isWindows && !knownHard[base]) {\n      fs.lstatSync(base);\n      knownHard[base] = true;\n    }\n  }\n\n  // walk down the path, swapping out linked pathparts for their real\n  // values\n  // NB: p.length changes.\n  while (pos < p.length) {\n    // find the next part\n    nextPartRe.lastIndex = pos;\n    var result = nextPartRe.exec(p);\n    previous = current;\n    current += result[0];\n    base = previous + result[1];\n    pos = nextPartRe.lastIndex;\n\n    // continue if not a symlink\n    if (knownHard[base] || (cache && cache[base] === base)) {\n      continue;\n    }\n\n    var resolvedLink;\n    if (cache && Object.prototype.hasOwnProperty.call(cache, base)) {\n      // some known symbolic link.  no need to stat again.\n      resolvedLink = cache[base];\n    } else {\n      var stat = fs.lstatSync(base);\n      if (!stat.isSymbolicLink()) {\n        knownHard[base] = true;\n        if (cache) cache[base] = base;\n        continue;\n      }\n\n      // read the link if it wasn't read before\n      // dev/ino always return 0 on windows, so skip the check.\n      var linkTarget = null;\n      if (!isWindows) {\n        var id = stat.dev.toString(32) + ':' + stat.ino.toString(32);\n        if (seenLinks.hasOwnProperty(id)) {\n          linkTarget = seenLinks[id];\n        }\n      }\n      if (linkTarget === null) {\n        fs.statSync(base);\n        linkTarget = fs.readlinkSync(base);\n      }\n      resolvedLink = pathModule.resolve(previous, linkTarget);\n      // track this, if given a cache.\n      if (cache) cache[base] = resolvedLink;\n      if (!isWindows) seenLinks[id] = linkTarget;\n    }\n\n    // resolve the link, then start over\n    p = pathModule.resolve(resolvedLink, p.slice(pos));\n    start();\n  }\n\n  if (cache) cache[original] = p;\n\n  return p;\n};\n\n\nexports.realpath = function realpath(p, cache, cb) {\n  if (typeof cb !== 'function') {\n    cb = maybeCallback(cache);\n    cache = null;\n  }\n\n  // make p is absolute\n  p = pathModule.resolve(p);\n\n  if (cache && Object.prototype.hasOwnProperty.call(cache, p)) {\n    return process.nextTick(cb.bind(null, null, cache[p]));\n  }\n\n  var original = p,\n      seenLinks = {},\n      knownHard = {};\n\n  // current character position in p\n  var pos;\n  // the partial path so far, including a trailing slash if any\n  var current;\n  // the partial path without a trailing slash (except when pointing at a root)\n  var base;\n  // the partial path scanned in the previous round, with slash\n  var previous;\n\n  start();\n\n  function start() {\n    // Skip over roots\n    var m = splitRootRe.exec(p);\n    pos = m[0].length;\n    current = m[0];\n    base = m[0];\n    previous = '';\n\n    // On windows, check that the root exists. On unix there is no need.\n    if (isWindows && !knownHard[base]) {\n      fs.lstat(base, function(err) {\n        if (err) return cb(err);\n        knownHard[base] = true;\n        LOOP();\n      });\n    } else {\n      process.nextTick(LOOP);\n    }\n  }\n\n  // walk down the path, swapping out linked pathparts for their real\n  // values\n  function LOOP() {\n    // stop if scanned past end of path\n    if (pos >= p.length) {\n      if (cache) cache[original] = p;\n      return cb(null, p);\n    }\n\n    // find the next part\n    nextPartRe.lastIndex = pos;\n    var result = nextPartRe.exec(p);\n    previous = current;\n    current += result[0];\n    base = previous + result[1];\n    pos = nextPartRe.lastIndex;\n\n    // continue if not a symlink\n    if (knownHard[base] || (cache && cache[base] === base)) {\n      return process.nextTick(LOOP);\n    }\n\n    if (cache && Object.prototype.hasOwnProperty.call(cache, base)) {\n      // known symbolic link.  no need to stat again.\n      return gotResolvedLink(cache[base]);\n    }\n\n    return fs.lstat(base, gotStat);\n  }\n\n  function gotStat(err, stat) {\n    if (err) return cb(err);\n\n    // if not a symlink, skip to the next path part\n    if (!stat.isSymbolicLink()) {\n      knownHard[base] = true;\n      if (cache) cache[base] = base;\n      return process.nextTick(LOOP);\n    }\n\n    // stat & read the link if not read before\n    // call gotTarget as soon as the link target is known\n    // dev/ino always return 0 on windows, so skip the check.\n    if (!isWindows) {\n      var id = stat.dev.toString(32) + ':' + stat.ino.toString(32);\n      if (seenLinks.hasOwnProperty(id)) {\n        return gotTarget(null, seenLinks[id], base);\n      }\n    }\n    fs.stat(base, function(err) {\n      if (err) return cb(err);\n\n      fs.readlink(base, function(err, target) {\n        if (!isWindows) seenLinks[id] = target;\n        gotTarget(err, target);\n      });\n    });\n  }\n\n  function gotTarget(err, target, base) {\n    if (err) return cb(err);\n\n    var resolvedLink = pathModule.resolve(previous, target);\n    if (cache) cache[base] = resolvedLink;\n    gotResolvedLink(resolvedLink);\n  }\n\n  function gotResolvedLink(resolvedLink) {\n    // resolve the link, then start over\n    p = pathModule.resolve(resolvedLink, p.slice(pos));\n    start();\n  }\n};\n","module.exports = realpath\nrealpath.realpath = realpath\nrealpath.sync = realpathSync\nrealpath.realpathSync = realpathSync\nrealpath.monkeypatch = monkeypatch\nrealpath.unmonkeypatch = unmonkeypatch\n\nvar fs = require('fs')\nvar origRealpath = fs.realpath\nvar origRealpathSync = fs.realpathSync\n\nvar version = process.version\nvar ok = /^v[0-5]\\./.test(version)\nvar old = require('./old.js')\n\nfunction newError (er) {\n  return er && er.syscall === 'realpath' && (\n    er.code === 'ELOOP' ||\n    er.code === 'ENOMEM' ||\n    er.code === 'ENAMETOOLONG'\n  )\n}\n\nfunction realpath (p, cache, cb) {\n  if (ok) {\n    return origRealpath(p, cache, cb)\n  }\n\n  if (typeof cache === 'function') {\n    cb = cache\n    cache = null\n  }\n  origRealpath(p, cache, function (er, result) {\n    if (newError(er)) {\n      old.realpath(p, cache, cb)\n    } else {\n      cb(er, result)\n    }\n  })\n}\n\nfunction realpathSync (p, cache) {\n  if (ok) {\n    return origRealpathSync(p, cache)\n  }\n\n  try {\n    return origRealpathSync(p, cache)\n  } catch (er) {\n    if (newError(er)) {\n      return old.realpathSync(p, cache)\n    } else {\n      throw er\n    }\n  }\n}\n\nfunction monkeypatch () {\n  fs.realpath = realpath\n  fs.realpathSync = realpathSync\n}\n\nfunction unmonkeypatch () {\n  fs.realpath = origRealpath\n  fs.realpathSync = origRealpathSync\n}\n","module.exports = function (xs, fn) {\n    var res = [];\n    for (var i = 0; i < xs.length; i++) {\n        var x = fn(xs[i], i);\n        if (isArray(x)) res.push.apply(res, x);\n        else res.push(x);\n    }\n    return res;\n};\n\nvar isArray = Array.isArray || function (xs) {\n    return Object.prototype.toString.call(xs) === '[object Array]';\n};\n","'use strict';\nmodule.exports = balanced;\nfunction balanced(a, b, str) {\n  if (a instanceof RegExp) a = maybeMatch(a, str);\n  if (b instanceof RegExp) b = maybeMatch(b, str);\n\n  var r = range(a, b, str);\n\n  return r && {\n    start: r[0],\n    end: r[1],\n    pre: str.slice(0, r[0]),\n    body: str.slice(r[0] + a.length, r[1]),\n    post: str.slice(r[1] + b.length)\n  };\n}\n\nfunction maybeMatch(reg, str) {\n  var m = str.match(reg);\n  return m ? m[0] : null;\n}\n\nbalanced.range = range;\nfunction range(a, b, str) {\n  var begs, beg, left, right, result;\n  var ai = str.indexOf(a);\n  var bi = str.indexOf(b, ai + 1);\n  var i = ai;\n\n  if (ai >= 0 && bi > 0) {\n    begs = [];\n    left = str.length;\n\n    while (i >= 0 && !result) {\n      if (i == ai) {\n        begs.push(i);\n        ai = str.indexOf(a, i + 1);\n      } else if (begs.length == 1) {\n        result = [ begs.pop(), bi ];\n      } else {\n        beg = begs.pop();\n        if (beg < left) {\n          left = beg;\n          right = bi;\n        }\n\n        bi = str.indexOf(b, i + 1);\n      }\n\n      i = ai < bi && ai >= 0 ? ai : bi;\n    }\n\n    if (begs.length) {\n      result = [ left, right ];\n    }\n  }\n\n  return result;\n}\n","var concatMap = require('concat-map');\nvar balanced = require('balanced-match');\n\nmodule.exports = expandTop;\n\nvar escSlash = '\\0SLASH'+Math.random()+'\\0';\nvar escOpen = '\\0OPEN'+Math.random()+'\\0';\nvar escClose = '\\0CLOSE'+Math.random()+'\\0';\nvar escComma = '\\0COMMA'+Math.random()+'\\0';\nvar escPeriod = '\\0PERIOD'+Math.random()+'\\0';\n\nfunction numeric(str) {\n  return parseInt(str, 10) == str\n    ? parseInt(str, 10)\n    : str.charCodeAt(0);\n}\n\nfunction escapeBraces(str) {\n  return str.split('\\\\\\\\').join(escSlash)\n            .split('\\\\{').join(escOpen)\n            .split('\\\\}').join(escClose)\n            .split('\\\\,').join(escComma)\n            .split('\\\\.').join(escPeriod);\n}\n\nfunction unescapeBraces(str) {\n  return str.split(escSlash).join('\\\\')\n            .split(escOpen).join('{')\n            .split(escClose).join('}')\n            .split(escComma).join(',')\n            .split(escPeriod).join('.');\n}\n\n\n// Basically just str.split(\",\"), but handling cases\n// where we have nested braced sections, which should be\n// treated as individual members, like {a,{b,c},d}\nfunction parseCommaParts(str) {\n  if (!str)\n    return [''];\n\n  var parts = [];\n  var m = balanced('{', '}', str);\n\n  if (!m)\n    return str.split(',');\n\n  var pre = m.pre;\n  var body = m.body;\n  var post = m.post;\n  var p = pre.split(',');\n\n  p[p.length-1] += '{' + body + '}';\n  var postParts = parseCommaParts(post);\n  if (post.length) {\n    p[p.length-1] += postParts.shift();\n    p.push.apply(p, postParts);\n  }\n\n  parts.push.apply(parts, p);\n\n  return parts;\n}\n\nfunction expandTop(str) {\n  if (!str)\n    return [];\n\n  // I don't know why Bash 4.3 does this, but it does.\n  // Anything starting with {} will have the first two bytes preserved\n  // but *only* at the top level, so {},a}b will not expand to anything,\n  // but a{},b}c will be expanded to [a}c,abc].\n  // One could argue that this is a bug in Bash, but since the goal of\n  // this module is to match Bash's rules, we escape a leading {}\n  if (str.substr(0, 2) === '{}') {\n    str = '\\\\{\\\\}' + str.substr(2);\n  }\n\n  return expand(escapeBraces(str), true).map(unescapeBraces);\n}\n\nfunction identity(e) {\n  return e;\n}\n\nfunction embrace(str) {\n  return '{' + str + '}';\n}\nfunction isPadded(el) {\n  return /^-?0\\d/.test(el);\n}\n\nfunction lte(i, y) {\n  return i <= y;\n}\nfunction gte(i, y) {\n  return i >= y;\n}\n\nfunction expand(str, isTop) {\n  var expansions = [];\n\n  var m = balanced('{', '}', str);\n  if (!m || /\\$$/.test(m.pre)) return [str];\n\n  var isNumericSequence = /^-?\\d+\\.\\.-?\\d+(?:\\.\\.-?\\d+)?$/.test(m.body);\n  var isAlphaSequence = /^[a-zA-Z]\\.\\.[a-zA-Z](?:\\.\\.-?\\d+)?$/.test(m.body);\n  var isSequence = isNumericSequence || isAlphaSequence;\n  var isOptions = m.body.indexOf(',') >= 0;\n  if (!isSequence && !isOptions) {\n    // {a},b}\n    if (m.post.match(/,.*\\}/)) {\n      str = m.pre + '{' + m.body + escClose + m.post;\n      return expand(str);\n    }\n    return [str];\n  }\n\n  var n;\n  if (isSequence) {\n    n = m.body.split(/\\.\\./);\n  } else {\n    n = parseCommaParts(m.body);\n    if (n.length === 1) {\n      // x{{a,b}}y ==> x{a}y x{b}y\n      n = expand(n[0], false).map(embrace);\n      if (n.length === 1) {\n        var post = m.post.length\n          ? expand(m.post, false)\n          : [''];\n        return post.map(function(p) {\n          return m.pre + n[0] + p;\n        });\n      }\n    }\n  }\n\n  // at this point, n is the parts, and we know it's not a comma set\n  // with a single entry.\n\n  // no need to expand pre, since it is guaranteed to be free of brace-sets\n  var pre = m.pre;\n  var post = m.post.length\n    ? expand(m.post, false)\n    : [''];\n\n  var N;\n\n  if (isSequence) {\n    var x = numeric(n[0]);\n    var y = numeric(n[1]);\n    var width = Math.max(n[0].length, n[1].length)\n    var incr = n.length == 3\n      ? Math.abs(numeric(n[2]))\n      : 1;\n    var test = lte;\n    var reverse = y < x;\n    if (reverse) {\n      incr *= -1;\n      test = gte;\n    }\n    var pad = n.some(isPadded);\n\n    N = [];\n\n    for (var i = x; test(i, y); i += incr) {\n      var c;\n      if (isAlphaSequence) {\n        c = String.fromCharCode(i);\n        if (c === '\\\\')\n          c = '';\n      } else {\n        c = String(i);\n        if (pad) {\n          var need = width - c.length;\n          if (need > 0) {\n            var z = new Array(need + 1).join('0');\n            if (i < 0)\n              c = '-' + z + c.slice(1);\n            else\n              c = z + c;\n          }\n        }\n      }\n      N.push(c);\n    }\n  } else {\n    N = concatMap(n, function(el) { return expand(el, false) });\n  }\n\n  for (var j = 0; j < N.length; j++) {\n    for (var k = 0; k < post.length; k++) {\n      var expansion = pre + N[j] + post[k];\n      if (!isTop || isSequence || expansion)\n        expansions.push(expansion);\n    }\n  }\n\n  return expansions;\n}\n\n","module.exports = minimatch\nminimatch.Minimatch = Minimatch\n\nvar path = { sep: '/' }\ntry {\n  path = require('path')\n} catch (er) {}\n\nvar GLOBSTAR = minimatch.GLOBSTAR = Minimatch.GLOBSTAR = {}\nvar expand = require('brace-expansion')\n\nvar plTypes = {\n  '!': { open: '(?:(?!(?:', close: '))[^/]*?)'},\n  '?': { open: '(?:', close: ')?' },\n  '+': { open: '(?:', close: ')+' },\n  '*': { open: '(?:', close: ')*' },\n  '@': { open: '(?:', close: ')' }\n}\n\n// any single thing other than /\n// don't need to escape / when using new RegExp()\nvar qmark = '[^/]'\n\n// * => any number of characters\nvar star = qmark + '*?'\n\n// ** when dots are allowed.  Anything goes, except .. and .\n// not (^ or / followed by one or two dots followed by $ or /),\n// followed by anything, any number of times.\nvar twoStarDot = '(?:(?!(?:\\\\\\/|^)(?:\\\\.{1,2})($|\\\\\\/)).)*?'\n\n// not a ^ or / followed by a dot,\n// followed by anything, any number of times.\nvar twoStarNoDot = '(?:(?!(?:\\\\\\/|^)\\\\.).)*?'\n\n// characters that need to be escaped in RegExp.\nvar reSpecials = charSet('().*{}+?[]^$\\\\!')\n\n// \"abc\" -> { a:true, b:true, c:true }\nfunction charSet (s) {\n  return s.split('').reduce(function (set, c) {\n    set[c] = true\n    return set\n  }, {})\n}\n\n// normalizes slashes.\nvar slashSplit = /\\/+/\n\nminimatch.filter = filter\nfunction filter (pattern, options) {\n  options = options || {}\n  return function (p, i, list) {\n    return minimatch(p, pattern, options)\n  }\n}\n\nfunction ext (a, b) {\n  a = a || {}\n  b = b || {}\n  var t = {}\n  Object.keys(b).forEach(function (k) {\n    t[k] = b[k]\n  })\n  Object.keys(a).forEach(function (k) {\n    t[k] = a[k]\n  })\n  return t\n}\n\nminimatch.defaults = function (def) {\n  if (!def || !Object.keys(def).length) return minimatch\n\n  var orig = minimatch\n\n  var m = function minimatch (p, pattern, options) {\n    return orig.minimatch(p, pattern, ext(def, options))\n  }\n\n  m.Minimatch = function Minimatch (pattern, options) {\n    return new orig.Minimatch(pattern, ext(def, options))\n  }\n\n  return m\n}\n\nMinimatch.defaults = function (def) {\n  if (!def || !Object.keys(def).length) return Minimatch\n  return minimatch.defaults(def).Minimatch\n}\n\nfunction minimatch (p, pattern, options) {\n  if (typeof pattern !== 'string') {\n    throw new TypeError('glob pattern string required')\n  }\n\n  if (!options) options = {}\n\n  // shortcut: comments match nothing.\n  if (!options.nocomment && pattern.charAt(0) === '#') {\n    return false\n  }\n\n  // \"\" only matches \"\"\n  if (pattern.trim() === '') return p === ''\n\n  return new Minimatch(pattern, options).match(p)\n}\n\nfunction Minimatch (pattern, options) {\n  if (!(this instanceof Minimatch)) {\n    return new Minimatch(pattern, options)\n  }\n\n  if (typeof pattern !== 'string') {\n    throw new TypeError('glob pattern string required')\n  }\n\n  if (!options) options = {}\n  pattern = pattern.trim()\n\n  // windows support: need to use /, not \\\n  if (path.sep !== '/') {\n    pattern = pattern.split(path.sep).join('/')\n  }\n\n  this.options = options\n  this.set = []\n  this.pattern = pattern\n  this.regexp = null\n  this.negate = false\n  this.comment = false\n  this.empty = false\n\n  // make the set of regexps etc.\n  this.make()\n}\n\nMinimatch.prototype.debug = function () {}\n\nMinimatch.prototype.make = make\nfunction make () {\n  // don't do it more than once.\n  if (this._made) return\n\n  var pattern = this.pattern\n  var options = this.options\n\n  // empty patterns and comments match nothing.\n  if (!options.nocomment && pattern.charAt(0) === '#') {\n    this.comment = true\n    return\n  }\n  if (!pattern) {\n    this.empty = true\n    return\n  }\n\n  // step 1: figure out negation, etc.\n  this.parseNegate()\n\n  // step 2: expand braces\n  var set = this.globSet = this.braceExpand()\n\n  if (options.debug) this.debug = console.error\n\n  this.debug(this.pattern, set)\n\n  // step 3: now we have a set, so turn each one into a series of path-portion\n  // matching patterns.\n  // These will be regexps, except in the case of \"**\", which is\n  // set to the GLOBSTAR object for globstar behavior,\n  // and will not contain any / characters\n  set = this.globParts = set.map(function (s) {\n    return s.split(slashSplit)\n  })\n\n  this.debug(this.pattern, set)\n\n  // glob --> regexps\n  set = set.map(function (s, si, set) {\n    return s.map(this.parse, this)\n  }, this)\n\n  this.debug(this.pattern, set)\n\n  // filter out everything that didn't compile properly.\n  set = set.filter(function (s) {\n    return s.indexOf(false) === -1\n  })\n\n  this.debug(this.pattern, set)\n\n  this.set = set\n}\n\nMinimatch.prototype.parseNegate = parseNegate\nfunction parseNegate () {\n  var pattern = this.pattern\n  var negate = false\n  var options = this.options\n  var negateOffset = 0\n\n  if (options.nonegate) return\n\n  for (var i = 0, l = pattern.length\n    ; i < l && pattern.charAt(i) === '!'\n    ; i++) {\n    negate = !negate\n    negateOffset++\n  }\n\n  if (negateOffset) this.pattern = pattern.substr(negateOffset)\n  this.negate = negate\n}\n\n// Brace expansion:\n// a{b,c}d -> abd acd\n// a{b,}c -> abc ac\n// a{0..3}d -> a0d a1d a2d a3d\n// a{b,c{d,e}f}g -> abg acdfg acefg\n// a{b,c}d{e,f}g -> abdeg acdeg abdeg abdfg\n//\n// Invalid sets are not expanded.\n// a{2..}b -> a{2..}b\n// a{b}c -> a{b}c\nminimatch.braceExpand = function (pattern, options) {\n  return braceExpand(pattern, options)\n}\n\nMinimatch.prototype.braceExpand = braceExpand\n\nfunction braceExpand (pattern, options) {\n  if (!options) {\n    if (this instanceof Minimatch) {\n      options = this.options\n    } else {\n      options = {}\n    }\n  }\n\n  pattern = typeof pattern === 'undefined'\n    ? this.pattern : pattern\n\n  if (typeof pattern === 'undefined') {\n    throw new TypeError('undefined pattern')\n  }\n\n  if (options.nobrace ||\n    !pattern.match(/\\{.*\\}/)) {\n    // shortcut. no need to expand.\n    return [pattern]\n  }\n\n  return expand(pattern)\n}\n\n// parse a component of the expanded set.\n// At this point, no pattern may contain \"/\" in it\n// so we're going to return a 2d array, where each entry is the full\n// pattern, split on '/', and then turned into a regular expression.\n// A regexp is made at the end which joins each array with an\n// escaped /, and another full one which joins each regexp with |.\n//\n// Following the lead of Bash 4.1, note that \"**\" only has special meaning\n// when it is the *only* thing in a path portion.  Otherwise, any series\n// of * is equivalent to a single *.  Globstar behavior is enabled by\n// default, and can be disabled by setting options.noglobstar.\nMinimatch.prototype.parse = parse\nvar SUBPARSE = {}\nfunction parse (pattern, isSub) {\n  if (pattern.length > 1024 * 64) {\n    throw new TypeError('pattern is too long')\n  }\n\n  var options = this.options\n\n  // shortcuts\n  if (!options.noglobstar && pattern === '**') return GLOBSTAR\n  if (pattern === '') return ''\n\n  var re = ''\n  var hasMagic = !!options.nocase\n  var escaping = false\n  // ? => one single character\n  var patternListStack = []\n  var negativeLists = []\n  var stateChar\n  var inClass = false\n  var reClassStart = -1\n  var classStart = -1\n  // . and .. never match anything that doesn't start with .,\n  // even when options.dot is set.\n  var patternStart = pattern.charAt(0) === '.' ? '' // anything\n  // not (start or / followed by . or .. followed by / or end)\n  : options.dot ? '(?!(?:^|\\\\\\/)\\\\.{1,2}(?:$|\\\\\\/))'\n  : '(?!\\\\.)'\n  var self = this\n\n  function clearStateChar () {\n    if (stateChar) {\n      // we had some state-tracking character\n      // that wasn't consumed by this pass.\n      switch (stateChar) {\n        case '*':\n          re += star\n          hasMagic = true\n        break\n        case '?':\n          re += qmark\n          hasMagic = true\n        break\n        default:\n          re += '\\\\' + stateChar\n        break\n      }\n      self.debug('clearStateChar %j %j', stateChar, re)\n      stateChar = false\n    }\n  }\n\n  for (var i = 0, len = pattern.length, c\n    ; (i < len) && (c = pattern.charAt(i))\n    ; i++) {\n    this.debug('%s\\t%s %s %j', pattern, i, re, c)\n\n    // skip over any that are escaped.\n    if (escaping && reSpecials[c]) {\n      re += '\\\\' + c\n      escaping = false\n      continue\n    }\n\n    switch (c) {\n      case '/':\n        // completely not allowed, even escaped.\n        // Should already be path-split by now.\n        return false\n\n      case '\\\\':\n        clearStateChar()\n        escaping = true\n      continue\n\n      // the various stateChar values\n      // for the \"extglob\" stuff.\n      case '?':\n      case '*':\n      case '+':\n      case '@':\n      case '!':\n        this.debug('%s\\t%s %s %j <-- stateChar', pattern, i, re, c)\n\n        // all of those are literals inside a class, except that\n        // the glob [!a] means [^a] in regexp\n        if (inClass) {\n          this.debug('  in class')\n          if (c === '!' && i === classStart + 1) c = '^'\n          re += c\n          continue\n        }\n\n        // if we already have a stateChar, then it means\n        // that there was something like ** or +? in there.\n        // Handle the stateChar, then proceed with this one.\n        self.debug('call clearStateChar %j', stateChar)\n        clearStateChar()\n        stateChar = c\n        // if extglob is disabled, then +(asdf|foo) isn't a thing.\n        // just clear the statechar *now*, rather than even diving into\n        // the patternList stuff.\n        if (options.noext) clearStateChar()\n      continue\n\n      case '(':\n        if (inClass) {\n          re += '('\n          continue\n        }\n\n        if (!stateChar) {\n          re += '\\\\('\n          continue\n        }\n\n        patternListStack.push({\n          type: stateChar,\n          start: i - 1,\n          reStart: re.length,\n          open: plTypes[stateChar].open,\n          close: plTypes[stateChar].close\n        })\n        // negation is (?:(?!js)[^/]*)\n        re += stateChar === '!' ? '(?:(?!(?:' : '(?:'\n        this.debug('plType %j %j', stateChar, re)\n        stateChar = false\n      continue\n\n      case ')':\n        if (inClass || !patternListStack.length) {\n          re += '\\\\)'\n          continue\n        }\n\n        clearStateChar()\n        hasMagic = true\n        var pl = patternListStack.pop()\n        // negation is (?:(?!js)[^/]*)\n        // The others are (?:<pattern>)<type>\n        re += pl.close\n        if (pl.type === '!') {\n          negativeLists.push(pl)\n        }\n        pl.reEnd = re.length\n      continue\n\n      case '|':\n        if (inClass || !patternListStack.length || escaping) {\n          re += '\\\\|'\n          escaping = false\n          continue\n        }\n\n        clearStateChar()\n        re += '|'\n      continue\n\n      // these are mostly the same in regexp and glob\n      case '[':\n        // swallow any state-tracking char before the [\n        clearStateChar()\n\n        if (inClass) {\n          re += '\\\\' + c\n          continue\n        }\n\n        inClass = true\n        classStart = i\n        reClassStart = re.length\n        re += c\n      continue\n\n      case ']':\n        //  a right bracket shall lose its special\n        //  meaning and represent itself in\n        //  a bracket expression if it occurs\n        //  first in the list.  -- POSIX.2 2.8.3.2\n        if (i === classStart + 1 || !inClass) {\n          re += '\\\\' + c\n          escaping = false\n          continue\n        }\n\n        // handle the case where we left a class open.\n        // \"[z-a]\" is valid, equivalent to \"\\[z-a\\]\"\n        if (inClass) {\n          // split where the last [ was, make sure we don't have\n          // an invalid re. if so, re-walk the contents of the\n          // would-be class to re-translate any characters that\n          // were passed through as-is\n          // TODO: It would probably be faster to determine this\n          // without a try/catch and a new RegExp, but it's tricky\n          // to do safely.  For now, this is safe and works.\n          var cs = pattern.substring(classStart + 1, i)\n          try {\n            RegExp('[' + cs + ']')\n          } catch (er) {\n            // not a valid class!\n            var sp = this.parse(cs, SUBPARSE)\n            re = re.substr(0, reClassStart) + '\\\\[' + sp[0] + '\\\\]'\n            hasMagic = hasMagic || sp[1]\n            inClass = false\n            continue\n          }\n        }\n\n        // finish up the class.\n        hasMagic = true\n        inClass = false\n        re += c\n      continue\n\n      default:\n        // swallow any state char that wasn't consumed\n        clearStateChar()\n\n        if (escaping) {\n          // no need\n          escaping = false\n        } else if (reSpecials[c]\n          && !(c === '^' && inClass)) {\n          re += '\\\\'\n        }\n\n        re += c\n\n    } // switch\n  } // for\n\n  // handle the case where we left a class open.\n  // \"[abc\" is valid, equivalent to \"\\[abc\"\n  if (inClass) {\n    // split where the last [ was, and escape it\n    // this is a huge pita.  We now have to re-walk\n    // the contents of the would-be class to re-translate\n    // any characters that were passed through as-is\n    cs = pattern.substr(classStart + 1)\n    sp = this.parse(cs, SUBPARSE)\n    re = re.substr(0, reClassStart) + '\\\\[' + sp[0]\n    hasMagic = hasMagic || sp[1]\n  }\n\n  // handle the case where we had a +( thing at the *end*\n  // of the pattern.\n  // each pattern list stack adds 3 chars, and we need to go through\n  // and escape any | chars that were passed through as-is for the regexp.\n  // Go through and escape them, taking care not to double-escape any\n  // | chars that were already escaped.\n  for (pl = patternListStack.pop(); pl; pl = patternListStack.pop()) {\n    var tail = re.slice(pl.reStart + pl.open.length)\n    this.debug('setting tail', re, pl)\n    // maybe some even number of \\, then maybe 1 \\, followed by a |\n    tail = tail.replace(/((?:\\\\{2}){0,64})(\\\\?)\\|/g, function (_, $1, $2) {\n      if (!$2) {\n        // the | isn't already escaped, so escape it.\n        $2 = '\\\\'\n      }\n\n      // need to escape all those slashes *again*, without escaping the\n      // one that we need for escaping the | character.  As it works out,\n      // escaping an even number of slashes can be done by simply repeating\n      // it exactly after itself.  That's why this trick works.\n      //\n      // I am sorry that you have to see this.\n      return $1 + $1 + $2 + '|'\n    })\n\n    this.debug('tail=%j\\n   %s', tail, tail, pl, re)\n    var t = pl.type === '*' ? star\n      : pl.type === '?' ? qmark\n      : '\\\\' + pl.type\n\n    hasMagic = true\n    re = re.slice(0, pl.reStart) + t + '\\\\(' + tail\n  }\n\n  // handle trailing things that only matter at the very end.\n  clearStateChar()\n  if (escaping) {\n    // trailing \\\\\n    re += '\\\\\\\\'\n  }\n\n  // only need to apply the nodot start if the re starts with\n  // something that could conceivably capture a dot\n  var addPatternStart = false\n  switch (re.charAt(0)) {\n    case '.':\n    case '[':\n    case '(': addPatternStart = true\n  }\n\n  // Hack to work around lack of negative lookbehind in JS\n  // A pattern like: *.!(x).!(y|z) needs to ensure that a name\n  // like 'a.xyz.yz' doesn't match.  So, the first negative\n  // lookahead, has to look ALL the way ahead, to the end of\n  // the pattern.\n  for (var n = negativeLists.length - 1; n > -1; n--) {\n    var nl = negativeLists[n]\n\n    var nlBefore = re.slice(0, nl.reStart)\n    var nlFirst = re.slice(nl.reStart, nl.reEnd - 8)\n    var nlLast = re.slice(nl.reEnd - 8, nl.reEnd)\n    var nlAfter = re.slice(nl.reEnd)\n\n    nlLast += nlAfter\n\n    // Handle nested stuff like *(*.js|!(*.json)), where open parens\n    // mean that we should *not* include the ) in the bit that is considered\n    // \"after\" the negated section.\n    var openParensBefore = nlBefore.split('(').length - 1\n    var cleanAfter = nlAfter\n    for (i = 0; i < openParensBefore; i++) {\n      cleanAfter = cleanAfter.replace(/\\)[+*?]?/, '')\n    }\n    nlAfter = cleanAfter\n\n    var dollar = ''\n    if (nlAfter === '' && isSub !== SUBPARSE) {\n      dollar = '$'\n    }\n    var newRe = nlBefore + nlFirst + nlAfter + dollar + nlLast\n    re = newRe\n  }\n\n  // if the re is not \"\" at this point, then we need to make sure\n  // it doesn't match against an empty path part.\n  // Otherwise a/* will match a/, which it should not.\n  if (re !== '' && hasMagic) {\n    re = '(?=.)' + re\n  }\n\n  if (addPatternStart) {\n    re = patternStart + re\n  }\n\n  // parsing just a piece of a larger pattern.\n  if (isSub === SUBPARSE) {\n    return [re, hasMagic]\n  }\n\n  // skip the regexp for non-magical patterns\n  // unescape anything in it, though, so that it'll be\n  // an exact match against a file etc.\n  if (!hasMagic) {\n    return globUnescape(pattern)\n  }\n\n  var flags = options.nocase ? 'i' : ''\n  try {\n    var regExp = new RegExp('^' + re + '$', flags)\n  } catch (er) {\n    // If it was an invalid regular expression, then it can't match\n    // anything.  This trick looks for a character after the end of\n    // the string, which is of course impossible, except in multi-line\n    // mode, but it's not a /m regex.\n    return new RegExp('$.')\n  }\n\n  regExp._glob = pattern\n  regExp._src = re\n\n  return regExp\n}\n\nminimatch.makeRe = function (pattern, options) {\n  return new Minimatch(pattern, options || {}).makeRe()\n}\n\nMinimatch.prototype.makeRe = makeRe\nfunction makeRe () {\n  if (this.regexp || this.regexp === false) return this.regexp\n\n  // at this point, this.set is a 2d array of partial\n  // pattern strings, or \"**\".\n  //\n  // It's better to use .match().  This function shouldn't\n  // be used, really, but it's pretty convenient sometimes,\n  // when you just want to work with a regex.\n  var set = this.set\n\n  if (!set.length) {\n    this.regexp = false\n    return this.regexp\n  }\n  var options = this.options\n\n  var twoStar = options.noglobstar ? star\n    : options.dot ? twoStarDot\n    : twoStarNoDot\n  var flags = options.nocase ? 'i' : ''\n\n  var re = set.map(function (pattern) {\n    return pattern.map(function (p) {\n      return (p === GLOBSTAR) ? twoStar\n      : (typeof p === 'string') ? regExpEscape(p)\n      : p._src\n    }).join('\\\\\\/')\n  }).join('|')\n\n  // must match entire pattern\n  // ending in a * or ** will make it less strict.\n  re = '^(?:' + re + ')$'\n\n  // can match anything, as long as it's not this.\n  if (this.negate) re = '^(?!' + re + ').*$'\n\n  try {\n    this.regexp = new RegExp(re, flags)\n  } catch (ex) {\n    this.regexp = false\n  }\n  return this.regexp\n}\n\nminimatch.match = function (list, pattern, options) {\n  options = options || {}\n  var mm = new Minimatch(pattern, options)\n  list = list.filter(function (f) {\n    return mm.match(f)\n  })\n  if (mm.options.nonull && !list.length) {\n    list.push(pattern)\n  }\n  return list\n}\n\nMinimatch.prototype.match = match\nfunction match (f, partial) {\n  this.debug('match', f, this.pattern)\n  // short-circuit in the case of busted things.\n  // comments, etc.\n  if (this.comment) return false\n  if (this.empty) return f === ''\n\n  if (f === '/' && partial) return true\n\n  var options = this.options\n\n  // windows: need to use /, not \\\n  if (path.sep !== '/') {\n    f = f.split(path.sep).join('/')\n  }\n\n  // treat the test path as a set of pathparts.\n  f = f.split(slashSplit)\n  this.debug(this.pattern, 'split', f)\n\n  // just ONE of the pattern sets in this.set needs to match\n  // in order for it to be valid.  If negating, then just one\n  // match means that we have failed.\n  // Either way, return on the first hit.\n\n  var set = this.set\n  this.debug(this.pattern, 'set', set)\n\n  // Find the basename of the path by looking for the last non-empty segment\n  var filename\n  var i\n  for (i = f.length - 1; i >= 0; i--) {\n    filename = f[i]\n    if (filename) break\n  }\n\n  for (i = 0; i < set.length; i++) {\n    var pattern = set[i]\n    var file = f\n    if (options.matchBase && pattern.length === 1) {\n      file = [filename]\n    }\n    var hit = this.matchOne(file, pattern, partial)\n    if (hit) {\n      if (options.flipNegate) return true\n      return !this.negate\n    }\n  }\n\n  // didn't get any hits.  this is success if it's a negative\n  // pattern, failure otherwise.\n  if (options.flipNegate) return false\n  return this.negate\n}\n\n// set partial to true to test if, for example,\n// \"/a/b\" matches the start of \"/*/b/*/d\"\n// Partial means, if you run out of file before you run\n// out of pattern, then that's fine, as long as all\n// the parts match.\nMinimatch.prototype.matchOne = function (file, pattern, partial) {\n  var options = this.options\n\n  this.debug('matchOne',\n    { 'this': this, file: file, pattern: pattern })\n\n  this.debug('matchOne', file.length, pattern.length)\n\n  for (var fi = 0,\n      pi = 0,\n      fl = file.length,\n      pl = pattern.length\n      ; (fi < fl) && (pi < pl)\n      ; fi++, pi++) {\n    this.debug('matchOne loop')\n    var p = pattern[pi]\n    var f = file[fi]\n\n    this.debug(pattern, p, f)\n\n    // should be impossible.\n    // some invalid regexp stuff in the set.\n    if (p === false) return false\n\n    if (p === GLOBSTAR) {\n      this.debug('GLOBSTAR', [pattern, p, f])\n\n      // \"**\"\n      // a/**/b/**/c would match the following:\n      // a/b/x/y/z/c\n      // a/x/y/z/b/c\n      // a/b/x/b/x/c\n      // a/b/c\n      // To do this, take the rest of the pattern after\n      // the **, and see if it would match the file remainder.\n      // If so, return success.\n      // If not, the ** \"swallows\" a segment, and try again.\n      // This is recursively awful.\n      //\n      // a/**/b/**/c matching a/b/x/y/z/c\n      // - a matches a\n      // - doublestar\n      //   - matchOne(b/x/y/z/c, b/**/c)\n      //     - b matches b\n      //     - doublestar\n      //       - matchOne(x/y/z/c, c) -> no\n      //       - matchOne(y/z/c, c) -> no\n      //       - matchOne(z/c, c) -> no\n      //       - matchOne(c, c) yes, hit\n      var fr = fi\n      var pr = pi + 1\n      if (pr === pl) {\n        this.debug('** at the end')\n        // a ** at the end will just swallow the rest.\n        // We have found a match.\n        // however, it will not swallow /.x, unless\n        // options.dot is set.\n        // . and .. are *never* matched by **, for explosively\n        // exponential reasons.\n        for (; fi < fl; fi++) {\n          if (file[fi] === '.' || file[fi] === '..' ||\n            (!options.dot && file[fi].charAt(0) === '.')) return false\n        }\n        return true\n      }\n\n      // ok, let's see if we can swallow whatever we can.\n      while (fr < fl) {\n        var swallowee = file[fr]\n\n        this.debug('\\nglobstar while', file, fr, pattern, pr, swallowee)\n\n        // XXX remove this slice.  Just pass the start index.\n        if (this.matchOne(file.slice(fr), pattern.slice(pr), partial)) {\n          this.debug('globstar found match!', fr, fl, swallowee)\n          // found a match.\n          return true\n        } else {\n          // can't swallow \".\" or \"..\" ever.\n          // can only swallow \".foo\" when explicitly asked.\n          if (swallowee === '.' || swallowee === '..' ||\n            (!options.dot && swallowee.charAt(0) === '.')) {\n            this.debug('dot detected!', file, fr, pattern, pr)\n            break\n          }\n\n          // ** swallows a segment, and continue.\n          this.debug('globstar swallow a segment, and continue')\n          fr++\n        }\n      }\n\n      // no match was found.\n      // However, in partial mode, we can't say this is necessarily over.\n      // If there's more *pattern* left, then\n      if (partial) {\n        // ran out of file\n        this.debug('\\n>>> no match, partial?', file, fr, pattern, pr)\n        if (fr === fl) return true\n      }\n      return false\n    }\n\n    // something other than **\n    // non-magic patterns just have to match exactly\n    // patterns with magic have been turned into regexps.\n    var hit\n    if (typeof p === 'string') {\n      if (options.nocase) {\n        hit = f.toLowerCase() === p.toLowerCase()\n      } else {\n        hit = f === p\n      }\n      this.debug('string match', p, f, hit)\n    } else {\n      hit = f.match(p)\n      this.debug('pattern match', p, f, hit)\n    }\n\n    if (!hit) return false\n  }\n\n  // Note: ending in / means that we'll get a final \"\"\n  // at the end of the pattern.  This can only match a\n  // corresponding \"\" at the end of the file.\n  // If the file ends in /, then it can only match a\n  // a pattern that ends in /, unless the pattern just\n  // doesn't have any more for it. But, a/b/ should *not*\n  // match \"a/b/*\", even though \"\" matches against the\n  // [^/]*? pattern, except in partial mode, where it might\n  // simply not be reached yet.\n  // However, a/b/ should still satisfy a/*\n\n  // now either we fell off the end of the pattern, or we're done.\n  if (fi === fl && pi === pl) {\n    // ran out of pattern and filename at the same time.\n    // an exact hit!\n    return true\n  } else if (fi === fl) {\n    // ran out of file, but still had pattern left.\n    // this is ok if we're doing the match as part of\n    // a glob fs traversal.\n    return partial\n  } else if (pi === pl) {\n    // ran out of pattern, still have file left.\n    // this is only acceptable if we're on the very last\n    // empty segment of a file with a trailing slash.\n    // a/* should match a/b/\n    var emptyFileEnd = (fi === fl - 1) && (file[fi] === '')\n    return emptyFileEnd\n  }\n\n  // should be unreachable.\n  throw new Error('wtf?')\n}\n\n// replace stuff like \\* with *\nfunction globUnescape (s) {\n  return s.replace(/\\\\(.)/g, '$1')\n}\n\nfunction regExpEscape (s) {\n  return s.replace(/[-[\\]{}()*+?.,\\\\^$|#\\s]/g, '\\\\$&')\n}\n","if (typeof Object.create === 'function') {\n  // implementation from standard node.js 'util' module\n  module.exports = function inherits(ctor, superCtor) {\n    if (superCtor) {\n      ctor.super_ = superCtor\n      ctor.prototype = Object.create(superCtor.prototype, {\n        constructor: {\n          value: ctor,\n          enumerable: false,\n          writable: true,\n          configurable: true\n        }\n      })\n    }\n  };\n} else {\n  // old school shim for old browsers\n  module.exports = function inherits(ctor, superCtor) {\n    if (superCtor) {\n      ctor.super_ = superCtor\n      var TempCtor = function () {}\n      TempCtor.prototype = superCtor.prototype\n      ctor.prototype = new TempCtor()\n      ctor.prototype.constructor = ctor\n    }\n  }\n}\n","'use strict';\n\nfunction posix(path) {\n\treturn path.charAt(0) === '/';\n}\n\nfunction win32(path) {\n\t// https://github.com/nodejs/node/blob/b3fcc245fb25539909ef1d5eaa01dbf92e168633/lib/path.js#L56\n\tvar splitDeviceRe = /^([a-zA-Z]:|[\\\\\\/]{2}[^\\\\\\/]+[\\\\\\/]+[^\\\\\\/]+)?([\\\\\\/])?([\\s\\S]*?)$/;\n\tvar result = splitDeviceRe.exec(path);\n\tvar device = result[1] || '';\n\tvar isUnc = Boolean(device && device.charAt(1) !== ':');\n\n\t// UNC paths are always absolute\n\treturn Boolean(result[2] || isUnc);\n}\n\nmodule.exports = process.platform === 'win32' ? win32 : posix;\nmodule.exports.posix = posix;\nmodule.exports.win32 = win32;\n","export { alphasort };\nexport { alphasorti };\nexport { setopts };\nexport { ownProp };\nexport { makeAbs };\nexport { finish };\nexport { mark };\nexport { isIgnored };\nexport { childrenIgnored };\n\nfunction ownProp(obj, field) {\n  return Object.prototype.hasOwnProperty.call(obj, field);\n}\n\nimport path from \"path\";\nimport minimatch from \"minimatch\";\nimport isAbsolute from \"path-is-absolute\";\nconst Minimatch = minimatch.Minimatch;\n\nfunction alphasorti(a, b) {\n  return a.toLowerCase().localeCompare(b.toLowerCase());\n}\n\nfunction alphasort(a, b) {\n  return a.localeCompare(b);\n}\n\nfunction setupIgnores(self, { ignore }) {\n  self.ignore = ignore || [];\n\n  if (!Array.isArray(self.ignore)) self.ignore = [self.ignore];\n\n  if (self.ignore.length) {\n    self.ignore = self.ignore.map(ignoreMap);\n  }\n}\n\n// ignore patterns are always in dot:true mode.\nfunction ignoreMap(pattern) {\n  let gmatcher = null;\n  if (pattern.slice(-3) === \"/**\") {\n    const gpattern = pattern.replace(/(\\/\\*\\*)+$/, \"\");\n    gmatcher = new Minimatch(gpattern, { dot: true });\n  }\n\n  return {\n    matcher: new Minimatch(pattern, { dot: true }),\n    gmatcher\n  };\n}\n\nfunction setopts(self, pattern, options) {\n  if (!options) options = {};\n\n  // base-matching: just use globstar for that.\n  if (options.matchBase && !pattern.includes(\"/\")) {\n    if (options.noglobstar) {\n      throw new Error(\"base matching requires globstar\");\n    }\n    pattern = `**/${pattern}`;\n  }\n\n  self.silent = !!options.silent;\n  self.pattern = pattern;\n  self.strict = options.strict !== false;\n  self.realpath = !!options.realpath;\n  self.realpathCache = options.realpathCache || Object.create(null);\n  self.follow = !!options.follow;\n  self.dot = !!options.dot;\n  self.mark = !!options.mark;\n  self.nodir = !!options.nodir;\n  if (self.nodir) self.mark = true;\n  self.sync = !!options.sync;\n  self.nounique = !!options.nounique;\n  self.nonull = !!options.nonull;\n  self.nosort = !!options.nosort;\n  self.nocase = !!options.nocase;\n  self.stat = !!options.stat;\n  self.noprocess = !!options.noprocess;\n  self.absolute = !!options.absolute;\n\n  self.maxLength = options.maxLength || Infinity;\n  self.cache = options.cache || Object.create(null);\n  self.statCache = options.statCache || Object.create(null);\n  self.symlinks = options.symlinks || Object.create(null);\n\n  setupIgnores(self, options);\n\n  self.changedCwd = false;\n  const cwd = process.cwd();\n  if (!ownProp(options, \"cwd\")) self.cwd = cwd;\n  else {\n    self.cwd = path.resolve(options.cwd);\n    self.changedCwd = self.cwd !== cwd;\n  }\n\n  self.root = options.root || path.resolve(self.cwd, \"/\");\n  self.root = path.resolve(self.root);\n  if (process.platform === \"win32\") self.root = self.root.replace(/\\\\/g, \"/\");\n\n  // TODO: is an absolute `cwd` supposed to be resolved against `root`?\n  // e.g. { cwd: '/test', root: __dirname } === path.join(__dirname, '/test')\n  self.cwdAbs = isAbsolute(self.cwd) ? self.cwd : makeAbs(self, self.cwd);\n  if (process.platform === \"win32\")\n    self.cwdAbs = self.cwdAbs.replace(/\\\\/g, \"/\");\n  self.nomount = !!options.nomount;\n\n  // disable comments and negation in Minimatch.\n  // Note that they are not supported in Glob itself anyway.\n  options.nonegate = true;\n  options.nocomment = true;\n\n  self.minimatch = new Minimatch(pattern, options);\n  self.options = self.minimatch.options;\n}\n\nfunction finish(self) {\n  const nou = self.nounique;\n  let all = nou ? [] : Object.create(null);\n\n  for (var i = 0, l = self.matches.length; i < l; i++) {\n    const matches = self.matches[i];\n    if (!matches || Object.keys(matches).length === 0) {\n      if (self.nonull) {\n        // do like the shell, and spit out the literal glob\n        const literal = self.minimatch.globSet[i];\n        if (nou) all.push(literal);\n        else all[literal] = true;\n      }\n    } else {\n      // had matches\n      const m = Object.keys(matches);\n      if (nou) all.push.apply(all, m);\n      else\n        m.forEach(m => {\n          all[m] = true;\n        });\n    }\n  }\n\n  if (!nou) all = Object.keys(all);\n\n  if (!self.nosort) all = all.sort(self.nocase ? alphasorti : alphasort);\n\n  // at *some* point we statted all of these\n  if (self.mark) {\n    for (var i = 0; i < all.length; i++) {\n      all[i] = self._mark(all[i]);\n    }\n    if (self.nodir) {\n      all = all.filter(e => {\n        let notDir = !/\\/$/.test(e);\n        const c = self.cache[e] || self.cache[makeAbs(self, e)];\n        if (notDir && c) notDir = c !== \"DIR\" && !Array.isArray(c);\n        return notDir;\n      });\n    }\n  }\n\n  if (self.ignore.length) all = all.filter(m => !isIgnored(self, m));\n\n  self.found = all;\n}\n\nfunction mark(self, p) {\n  const abs = makeAbs(self, p);\n  const c = self.cache[abs];\n  let m = p;\n  if (c) {\n    const isDir = c === \"DIR\" || Array.isArray(c);\n    const slash = p.slice(-1) === \"/\";\n\n    if (isDir && !slash) m += \"/\";\n    else if (!isDir && slash) m = m.slice(0, -1);\n\n    if (m !== p) {\n      const mabs = makeAbs(self, m);\n      self.statCache[mabs] = self.statCache[abs];\n      self.cache[mabs] = self.cache[abs];\n    }\n  }\n\n  return m;\n}\n\n// lotta situps...\nfunction makeAbs({ root, changedCwd, cwd }, f) {\n  let abs = f;\n  if (f.charAt(0) === \"/\") {\n    abs = path.join(root, f);\n  } else if (isAbsolute(f) || f === \"\") {\n    abs = f;\n  } else if (changedCwd) {\n    abs = path.resolve(cwd, f);\n  } else {\n    abs = path.resolve(f);\n  }\n\n  if (process.platform === \"win32\") abs = abs.replace(/\\\\/g, \"/\");\n\n  return abs;\n}\n\n// Return true, if pattern ends with globstar '**', for the accompanying parent directory.\n// Ex:- If node_modules/** is the pattern, add 'node_modules' to ignore list along with it's contents\nfunction isIgnored({ ignore }, path) {\n  if (!ignore.length) return false;\n\n  return ignore.some(\n    ({ matcher, gmatcher }) =>\n      matcher.match(path) || !!(gmatcher && gmatcher.match(path))\n  );\n}\n\nfunction childrenIgnored({ ignore }, path) {\n  if (!ignore.length) return false;\n\n  return ignore.some(({ gmatcher }) => !!(gmatcher && gmatcher.match(path)));\n}\n","export default globSync;\nglobSync.GlobSync = GlobSync;\n\nimport fs from \"fs\";\nimport rp from \"fs.realpath\";\nimport minimatch from \"minimatch\";\nconst Minimatch = minimatch.Minimatch;\nimport glob from \"./glob.js\";\nimport util from \"util\";\nimport path from \"path\";\nimport assert from \"assert\";\nimport isAbsolute from \"path-is-absolute\";\nimport * as common from \"./common.js\";\nconst alphasort = common.alphasort;\nconst alphasorti = common.alphasorti;\nconst setopts = common.setopts;\nconst ownProp = common.ownProp;\nconst childrenIgnored = common.childrenIgnored;\nconst isIgnored = common.isIgnored;\n\nfunction globSync(pattern, options) {\n  if (typeof options === \"function\" || arguments.length === 3)\n    throw new TypeError(\n      \"callback provided to sync glob\\n\" +\n        \"See: https://github.com/isaacs/node-glob/issues/167\"\n    );\n\n  return new GlobSync(pattern, options).found;\n}\n\nclass GlobSync {\n  constructor(pattern, options) {\n    if (!pattern) throw new Error(\"must provide pattern\");\n\n    if (typeof options === \"function\" || arguments.length === 3)\n      throw new TypeError(\n        \"callback provided to sync glob\\n\" +\n          \"See: https://github.com/isaacs/node-glob/issues/167\"\n      );\n\n    if (!(this instanceof GlobSync)) return new GlobSync(pattern, options);\n\n    setopts(this, pattern, options);\n\n    if (this.noprocess) return this;\n\n    const n = this.minimatch.set.length;\n    this.matches = new Array(n);\n    for (let i = 0; i < n; i++) {\n      this._process(this.minimatch.set[i], i, false);\n    }\n    this._finish();\n  }\n\n  _finish() {\n    assert(this instanceof GlobSync);\n    if (this.realpath) {\n      const self = this;\n      this.matches.forEach((matchset, index) => {\n        const set = (self.matches[index] = Object.create(null));\n        for (let p in matchset) {\n          try {\n            p = self._makeAbs(p);\n            const real = rp.realpathSync(p, self.realpathCache);\n            set[real] = true;\n          } catch (er) {\n            if (er.syscall === \"stat\") set[self._makeAbs(p)] = true;\n            else throw er;\n          }\n        }\n      });\n    }\n    common.finish(this);\n  }\n\n  _process(pattern, index, inGlobStar) {\n    assert(this instanceof GlobSync);\n\n    // Get the first [n] parts of pattern that are all strings.\n    let n = 0;\n    while (typeof pattern[n] === \"string\") {\n      n++;\n    }\n    // now n is the index of the first one that is *not* a string.\n\n    // See if there's anything else\n    let prefix;\n    switch (n) {\n      // if not, then this is rather simple\n      case pattern.length:\n        this._processSimple(pattern.join(\"/\"), index);\n        return;\n\n      case 0:\n        // pattern *starts* with some non-trivial item.\n        // going to readdir(cwd), but not include the prefix in matches.\n        prefix = null;\n        break;\n\n      default:\n        // pattern has some string bits in the front.\n        // whatever it starts with, whether that's 'absolute' like /foo/bar,\n        // or 'relative' like '../baz'\n        prefix = pattern.slice(0, n).join(\"/\");\n        break;\n    }\n\n    const remain = pattern.slice(n);\n\n    // get the list of entries.\n    let read;\n    if (prefix === null) read = \".\";\n    else if (isAbsolute(prefix) || isAbsolute(pattern.join(\"/\"))) {\n      if (!prefix || !isAbsolute(prefix)) prefix = `/${prefix}`;\n      read = prefix;\n    } else read = prefix;\n\n    const abs = this._makeAbs(read);\n\n    //if ignored, skip processing\n    if (childrenIgnored(this, read)) return;\n\n    const isGlobStar = remain[0] === minimatch.GLOBSTAR;\n    if (isGlobStar)\n      this._processGlobStar(prefix, read, abs, remain, index, inGlobStar);\n    else this._processReaddir(prefix, read, abs, remain, index, inGlobStar);\n  }\n\n  _processReaddir(prefix, read, abs, remain, index, inGlobStar) {\n    const entries = this._readdir(abs, inGlobStar);\n\n    // if the abs isn't a dir, then nothing can match!\n    if (!entries) return;\n\n    // It will only match dot entries if it starts with a dot, or if\n    // dot is set.  Stuff like @(.foo|.bar) isn't allowed.\n    const pn = remain[0];\n    const negate = !!this.minimatch.negate;\n    const rawGlob = pn._glob;\n    const dotOk = this.dot || rawGlob.charAt(0) === \".\";\n\n    const matchedEntries = [];\n    for (var i = 0; i < entries.length; i++) {\n      var e = entries[i];\n      if (e.charAt(0) !== \".\" || dotOk) {\n        let m;\n        if (negate && !prefix) {\n          m = !e.match(pn);\n        } else {\n          m = e.match(pn);\n        }\n        if (m) matchedEntries.push(e);\n      }\n    }\n\n    const len = matchedEntries.length;\n    // If there are no matched entries, then nothing matches.\n    if (len === 0) return;\n\n    // if this is the last remaining pattern bit, then no need for\n    // an additional stat *unless* the user has specified mark or\n    // stat explicitly.  We know they exist, since readdir returned\n    // them.\n\n    if (remain.length === 1 && !this.mark && !this.stat) {\n      if (!this.matches[index]) this.matches[index] = Object.create(null);\n\n      for (var i = 0; i < len; i++) {\n        var e = matchedEntries[i];\n        if (prefix) {\n          if (prefix.slice(-1) !== \"/\") e = `${prefix}/${e}`;\n          else e = prefix + e;\n        }\n\n        if (e.charAt(0) === \"/\" && !this.nomount) {\n          e = path.join(this.root, e);\n        }\n        this._emitMatch(index, e);\n      }\n      // This was the last one, and no stats were needed\n      return;\n    }\n\n    // now test all matched entries as stand-ins for that part\n    // of the pattern.\n    remain.shift();\n    for (var i = 0; i < len; i++) {\n      var e = matchedEntries[i];\n      let newPattern;\n      if (prefix) newPattern = [prefix, e];\n      else newPattern = [e];\n      this._process(newPattern.concat(remain), index, inGlobStar);\n    }\n  }\n\n  _emitMatch(index, e) {\n    if (isIgnored(this, e)) return;\n\n    const abs = this._makeAbs(e);\n\n    if (this.mark) e = this._mark(e);\n\n    if (this.absolute) {\n      e = abs;\n    }\n\n    if (this.matches[index][e]) return;\n\n    if (this.nodir) {\n      const c = this.cache[abs];\n      if (c === \"DIR\" || Array.isArray(c)) return;\n    }\n\n    this.matches[index][e] = true;\n\n    if (this.stat) this._stat(e);\n  }\n\n  _readdirInGlobStar(abs) {\n    // follow all symlinked directories forever\n    // just proceed as if this is a non-globstar situation\n    if (this.follow) return this._readdir(abs, false);\n\n    let entries;\n    let lstat;\n    let stat;\n    try {\n      lstat = fs.lstatSync(abs);\n    } catch (er) {\n      if (er.code === \"ENOENT\") {\n        // lstat failed, doesn't exist\n        return null;\n      }\n    }\n\n    const isSym = lstat && lstat.isSymbolicLink();\n    this.symlinks[abs] = isSym;\n\n    // If it's not a symlink or a dir, then it's definitely a regular file.\n    // don't bother doing a readdir in that case.\n    if (!isSym && lstat && !lstat.isDirectory()) this.cache[abs] = \"FILE\";\n    else entries = this._readdir(abs, false);\n\n    return entries;\n  }\n\n  _readdir(abs, inGlobStar) {\n    let entries;\n\n    if (inGlobStar && !ownProp(this.symlinks, abs))\n      return this._readdirInGlobStar(abs);\n\n    if (ownProp(this.cache, abs)) {\n      const c = this.cache[abs];\n      if (!c || c === \"FILE\") return null;\n\n      if (Array.isArray(c)) return c;\n    }\n\n    try {\n      return this._readdirEntries(abs, fs.readdirSync(abs));\n    } catch (er) {\n      this._readdirError(abs, er);\n      return null;\n    }\n  }\n\n  _readdirEntries(abs, entries) {\n    // if we haven't asked to stat everything, then just\n    // assume that everything in there exists, so we can avoid\n    // having to stat it a second time.\n    if (!this.mark && !this.stat) {\n      for (let i = 0; i < entries.length; i++) {\n        let e = entries[i];\n        if (abs === \"/\") e = abs + e;\n        else e = `${abs}/${e}`;\n        this.cache[e] = true;\n      }\n    }\n\n    this.cache[abs] = entries;\n\n    // mark and cache dir-ness\n    return entries;\n  }\n\n  _readdirError(f, er) {\n    // handle errors, and cache the information\n    switch (er.code) {\n      case \"ENOTSUP\": // https://github.com/isaacs/node-glob/issues/205\n      case \"ENOTDIR\": // totally normal. means it *does* exist.\n        const abs = this._makeAbs(f);\n        this.cache[abs] = \"FILE\";\n        if (abs === this.cwdAbs) {\n          const error = new Error(`${er.code} invalid cwd ${this.cwd}`);\n          error.path = this.cwd;\n          error.code = er.code;\n          throw error;\n        }\n        break;\n\n      case \"ENOENT\": // not terribly unusual\n      case \"ELOOP\":\n      case \"ENAMETOOLONG\":\n      case \"UNKNOWN\":\n        this.cache[this._makeAbs(f)] = false;\n        break;\n\n      default:\n        // some unusual error.  Treat as failure.\n        this.cache[this._makeAbs(f)] = false;\n        if (this.strict) throw er;\n        if (!this.silent) console.error(\"glob error\", er);\n        break;\n    }\n  }\n\n  _processGlobStar(prefix, read, abs, remain, index, inGlobStar) {\n    const entries = this._readdir(abs, inGlobStar);\n\n    // no entries means not a dir, so it can never have matches\n    // foo.txt/** doesn't match foo.txt\n    if (!entries) return;\n\n    // test without the globstar, and with every child both below\n    // and replacing the globstar.\n    const remainWithoutGlobStar = remain.slice(1);\n    const gspref = prefix ? [prefix] : [];\n    const noGlobStar = gspref.concat(remainWithoutGlobStar);\n\n    // the noGlobStar pattern exits the inGlobStar state\n    this._process(noGlobStar, index, false);\n\n    const len = entries.length;\n    const isSym = this.symlinks[abs];\n\n    // If it's a symlink, and we're in a globstar, then stop\n    if (isSym && inGlobStar) return;\n\n    for (let i = 0; i < len; i++) {\n      const e = entries[i];\n      if (e.charAt(0) === \".\" && !this.dot) continue;\n\n      // these two cases enter the inGlobStar state\n      const instead = gspref.concat(entries[i], remainWithoutGlobStar);\n      this._process(instead, index, true);\n\n      const below = gspref.concat(entries[i], remain);\n      this._process(below, index, true);\n    }\n  }\n\n  _processSimple(prefix, index) {\n    // XXX review this.  Shouldn't it be doing the mounting etc\n    // before doing stat?  kinda weird?\n    const exists = this._stat(prefix);\n\n    if (!this.matches[index]) this.matches[index] = Object.create(null);\n\n    // If it doesn't exist, then just mark the lack of results\n    if (!exists) return;\n\n    if (prefix && isAbsolute(prefix) && !this.nomount) {\n      const trail = /[\\/\\\\]$/.test(prefix);\n      if (prefix.charAt(0) === \"/\") {\n        prefix = path.join(this.root, prefix);\n      } else {\n        prefix = path.resolve(this.root, prefix);\n        if (trail) prefix += \"/\";\n      }\n    }\n\n    if (process.platform === \"win32\") prefix = prefix.replace(/\\\\/g, \"/\");\n\n    // Mark this as a match\n    this._emitMatch(index, prefix);\n  }\n\n  // Returns either 'DIR', 'FILE', or false\n  _stat(f) {\n    const abs = this._makeAbs(f);\n    const needDir = f.slice(-1) === \"/\";\n\n    if (f.length > this.maxLength) return false;\n\n    if (!this.stat && ownProp(this.cache, abs)) {\n      var c = this.cache[abs];\n\n      if (Array.isArray(c)) c = \"DIR\";\n\n      // It exists, but maybe not how we need it\n      if (!needDir || c === \"DIR\") return c;\n\n      if (needDir && c === \"FILE\") return false;\n\n      // otherwise we have to stat, because maybe c=true\n      // if we know it exists, but not what it is.\n    }\n\n    let exists;\n    let stat = this.statCache[abs];\n    if (!stat) {\n      let lstat;\n      try {\n        lstat = fs.lstatSync(abs);\n      } catch (er) {\n        if (er && (er.code === \"ENOENT\" || er.code === \"ENOTDIR\")) {\n          this.statCache[abs] = false;\n          return false;\n        }\n      }\n\n      if (lstat && lstat.isSymbolicLink()) {\n        try {\n          stat = fs.statSync(abs);\n        } catch (er) {\n          stat = lstat;\n        }\n      } else {\n        stat = lstat;\n      }\n    }\n\n    this.statCache[abs] = stat;\n\n    var c = true;\n    if (stat) c = stat.isDirectory() ? \"DIR\" : \"FILE\";\n\n    this.cache[abs] = this.cache[abs] || c;\n\n    if (needDir && c === \"FILE\") return false;\n\n    return c;\n  }\n\n  _mark(p) {\n    return common.mark(this, p);\n  }\n\n  _makeAbs(f) {\n    return common.makeAbs(this, f);\n  }\n}\n","// Returns a wrapper function that returns a wrapped callback\n// The wrapper function should do some stuff, and return a\n// presumably different callback function.\n// This makes sure that own properties are retained, so that\n// decorations and such are not lost along the way.\nmodule.exports = wrappy\nfunction wrappy (fn, cb) {\n  if (fn && cb) return wrappy(fn)(cb)\n\n  if (typeof fn !== 'function')\n    throw new TypeError('need wrapper function')\n\n  Object.keys(fn).forEach(function (k) {\n    wrapper[k] = fn[k]\n  })\n\n  return wrapper\n\n  function wrapper() {\n    var args = new Array(arguments.length)\n    for (var i = 0; i < args.length; i++) {\n      args[i] = arguments[i]\n    }\n    var ret = fn.apply(this, args)\n    var cb = args[args.length-1]\n    if (typeof ret === 'function' && ret !== cb) {\n      Object.keys(cb).forEach(function (k) {\n        ret[k] = cb[k]\n      })\n    }\n    return ret\n  }\n}\n","var wrappy = require('wrappy')\nmodule.exports = wrappy(once)\nmodule.exports.strict = wrappy(onceStrict)\n\nonce.proto = once(function () {\n  Object.defineProperty(Function.prototype, 'once', {\n    value: function () {\n      return once(this)\n    },\n    configurable: true\n  })\n\n  Object.defineProperty(Function.prototype, 'onceStrict', {\n    value: function () {\n      return onceStrict(this)\n    },\n    configurable: true\n  })\n})\n\nfunction once (fn) {\n  var f = function () {\n    if (f.called) return f.value\n    f.called = true\n    return f.value = fn.apply(this, arguments)\n  }\n  f.called = false\n  return f\n}\n\nfunction onceStrict (fn) {\n  var f = function () {\n    if (f.called)\n      throw new Error(f.onceError)\n    f.called = true\n    return f.value = fn.apply(this, arguments)\n  }\n  var name = fn.name || 'Function wrapped with `once`'\n  f.onceError = name + \" shouldn't be called more than once\"\n  f.called = false\n  return f\n}\n","var wrappy = require('wrappy')\nvar reqs = Object.create(null)\nvar once = require('once')\n\nmodule.exports = wrappy(inflight)\n\nfunction inflight (key, cb) {\n  if (reqs[key]) {\n    reqs[key].push(cb)\n    return null\n  } else {\n    reqs[key] = [cb]\n    return makeres(key)\n  }\n}\n\nfunction makeres (key) {\n  return once(function RES () {\n    var cbs = reqs[key]\n    var len = cbs.length\n    var args = slice(arguments)\n\n    // XXX It's somewhat ambiguous whether a new callback added in this\n    // pass should be queued for later execution if something in the\n    // list of callbacks throws, or if it should just be discarded.\n    // However, it's such an edge case that it hardly matters, and either\n    // choice is likely as surprising as the other.\n    // As it happens, we do go ahead and schedule it for later execution.\n    try {\n      for (var i = 0; i < len; i++) {\n        cbs[i].apply(null, args)\n      }\n    } finally {\n      if (cbs.length > len) {\n        // added more in the interim.\n        // de-zalgo, just in case, but don't call again.\n        cbs.splice(0, len)\n        process.nextTick(function () {\n          RES.apply(null, args)\n        })\n      } else {\n        delete reqs[key]\n      }\n    }\n  })\n}\n\nfunction slice (args) {\n  var length = args.length\n  var array = []\n\n  for (var i = 0; i < length; i++) array[i] = args[i]\n  return array\n}\n","// Approach:\n//\n// 1. Get the minimatch set\n// 2. For each pattern in the set, PROCESS(pattern, false)\n// 3. Store matches per-set, then uniq them\n//\n// PROCESS(pattern, inGlobStar)\n// Get the first [n] items from pattern that are all strings\n// Join these together.  This is PREFIX.\n//   If there is no more remaining, then stat(PREFIX) and\n//   add to matches if it succeeds.  END.\n//\n// If inGlobStar and PREFIX is symlink and points to dir\n//   set ENTRIES = []\n// else readdir(PREFIX) as ENTRIES\n//   If fail, END\n//\n// with ENTRIES\n//   If pattern[n] is GLOBSTAR\n//     // handle the case where the globstar match is empty\n//     // by pruning it out, and testing the resulting pattern\n//     PROCESS(pattern[0..n] + pattern[n+1 .. $], false)\n//     // handle other cases.\n//     for ENTRY in ENTRIES (not dotfiles)\n//       // attach globstar + tail onto the entry\n//       // Mark that this entry is a globstar match\n//       PROCESS(pattern[0..n] + ENTRY + pattern[n .. $], true)\n//\n//   else // not globstar\n//     for ENTRY in ENTRIES (not dotfiles, unless pattern[n] is dot)\n//       Test ENTRY against pattern[n]\n//       If fails, continue\n//       If passes, PROCESS(pattern[0..n] + item + pattern[n+1 .. $])\n//\n// Caveat:\n//   Cache all stats and readdirs results to minimize syscall.  Since all\n//   we ever care about is existence and directory-ness, we can just keep\n//   `true` for files, and [children,...] for directories, or `false` for\n//   things that don't exist.\n\nexport default glob;\n\nimport fs from \"fs\";\nimport rp from \"fs.realpath\";\nimport minimatch from \"minimatch\";\nconst Minimatch = minimatch.Minimatch;\nimport inherits from \"inherits\";\nimport { EventEmitter as EE } from \"events\";\nimport path from \"path\";\nimport assert from \"assert\";\nimport isAbsolute from \"path-is-absolute\";\nimport globSync from \"./sync.js\";\nimport * as common from \"./common.js\";\nconst alphasort = common.alphasort;\nconst alphasorti = common.alphasorti;\nconst setopts = common.setopts;\nconst ownProp = common.ownProp;\nimport inflight from \"inflight\";\nimport util from \"util\";\nconst childrenIgnored = common.childrenIgnored;\nconst isIgnored = common.isIgnored;\n\nimport once from \"once\";\n\nfunction glob(pattern, options, cb) {\n  if (typeof options === \"function\") (cb = options), (options = {});\n  if (!options) options = {};\n\n  if (options.sync) {\n    if (cb) throw new TypeError(\"callback provided to sync glob\");\n    return globSync(pattern, options);\n  }\n\n  return new Glob(pattern, options, cb);\n}\n\nglob.sync = globSync;\nconst GlobSync = (glob.GlobSync = globSync.GlobSync);\n\n// old api surface\nglob.glob = glob;\n\nfunction extend(origin, add) {\n  if (add === null || typeof add !== \"object\") {\n    return origin;\n  }\n\n  const keys = Object.keys(add);\n  let i = keys.length;\n  while (i--) {\n    origin[keys[i]] = add[keys[i]];\n  }\n  return origin;\n}\n\nglob.hasMagic = (pattern, options_) => {\n  const options = extend({}, options_);\n  options.noprocess = true;\n\n  const g = new Glob(pattern, options);\n  const set = g.minimatch.set;\n\n  if (!pattern) return false;\n\n  if (set.length > 1) return true;\n\n  for (let j = 0; j < set[0].length; j++) {\n    if (typeof set[0][j] !== \"string\") return true;\n  }\n\n  return false;\n};\n\nglob.Glob = Glob;\ninherits(Glob, EE);\n\nclass Glob {\n  constructor(pattern, options, cb) {\n    if (typeof options === \"function\") {\n      cb = options;\n      options = null;\n    }\n\n    if (options && options.sync) {\n      if (cb) throw new TypeError(\"callback provided to sync glob\");\n      return new GlobSync(pattern, options);\n    }\n\n    if (!(this instanceof Glob)) return new Glob(pattern, options, cb);\n\n    setopts(this, pattern, options);\n    this._didRealPath = false;\n\n    // process each pattern in the minimatch set\n    const n = this.minimatch.set.length;\n\n    // The matches are stored as {<filename>: true,...} so that\n    // duplicates are automagically pruned.\n    // Later, we do an Object.keys() on these.\n    // Keep them as a list so we can fill in when nonull is set.\n    this.matches = new Array(n);\n\n    if (typeof cb === \"function\") {\n      cb = once(cb);\n      this.on(\"error\", cb);\n      this.on(\"end\", matches => {\n        cb(null, matches);\n      });\n    }\n\n    const self = this;\n    this._processing = 0;\n\n    this._emitQueue = [];\n    this._processQueue = [];\n    this.paused = false;\n\n    if (this.noprocess) return this;\n\n    if (n === 0) return done();\n\n    let sync = true;\n    for (let i = 0; i < n; i++) {\n      this._process(this.minimatch.set[i], i, false, done);\n    }\n    sync = false;\n\n    function done() {\n      --self._processing;\n      if (self._processing <= 0) {\n        if (sync) {\n          process.nextTick(() => {\n            self._finish();\n          });\n        } else {\n          self._finish();\n        }\n      }\n    }\n  }\n\n  _finish() {\n    assert(this instanceof Glob);\n    if (this.aborted) return;\n\n    if (this.realpath && !this._didRealpath) return this._realpath();\n\n    common.finish(this);\n    this.emit(\"end\", this.found);\n  }\n\n  _realpath() {\n    if (this._didRealpath) return;\n\n    this._didRealpath = true;\n\n    let n = this.matches.length;\n    if (n === 0) return this._finish();\n\n    const self = this;\n    for (let i = 0; i < this.matches.length; i++) this._realpathSet(i, next);\n\n    function next() {\n      if (--n === 0) self._finish();\n    }\n  }\n\n  _realpathSet(index, cb) {\n    const matchset = this.matches[index];\n    if (!matchset) return cb();\n\n    const found = Object.keys(matchset);\n    const self = this;\n    let n = found.length;\n\n    if (n === 0) return cb();\n\n    const set = (this.matches[index] = Object.create(null));\n    found.forEach((p, i) => {\n      // If there's a problem with the stat, then it means that\n      // one or more of the links in the realpath couldn't be\n      // resolved.  just return the abs value in that case.\n      p = self._makeAbs(p);\n      rp.realpath(p, self.realpathCache, (er, real) => {\n        if (!er) set[real] = true;\n        else if (er.syscall === \"stat\") set[p] = true;\n        else self.emit(\"error\", er); // srsly wtf right here\n\n        if (--n === 0) {\n          self.matches[index] = set;\n          cb();\n        }\n      });\n    });\n  }\n\n  _mark(p) {\n    return common.mark(this, p);\n  }\n\n  _makeAbs(f) {\n    return common.makeAbs(this, f);\n  }\n\n  abort() {\n    this.aborted = true;\n    this.emit(\"abort\");\n  }\n\n  pause() {\n    if (!this.paused) {\n      this.paused = true;\n      this.emit(\"pause\");\n    }\n  }\n\n  resume() {\n    if (this.paused) {\n      this.emit(\"resume\");\n      this.paused = false;\n      if (this._emitQueue.length) {\n        const eq = this._emitQueue.slice(0);\n        this._emitQueue.length = 0;\n        for (var i = 0; i < eq.length; i++) {\n          const e = eq[i];\n          this._emitMatch(e[0], e[1]);\n        }\n      }\n      if (this._processQueue.length) {\n        const pq = this._processQueue.slice(0);\n        this._processQueue.length = 0;\n        for (var i = 0; i < pq.length; i++) {\n          const p = pq[i];\n          this._processing--;\n          this._process(p[0], p[1], p[2], p[3]);\n        }\n      }\n    }\n  }\n\n  _process(pattern, index, inGlobStar, cb) {\n    assert(this instanceof Glob);\n    assert(typeof cb === \"function\");\n\n    if (this.aborted) return;\n\n    this._processing++;\n    if (this.paused) {\n      this._processQueue.push([pattern, index, inGlobStar, cb]);\n      return;\n    }\n\n    //console.error('PROCESS %d', this._processing, pattern)\n\n    // Get the first [n] parts of pattern that are all strings.\n    let n = 0;\n    while (typeof pattern[n] === \"string\") {\n      n++;\n    }\n    // now n is the index of the first one that is *not* a string.\n\n    // see if there's anything else\n    let prefix;\n    switch (n) {\n      // if not, then this is rather simple\n      case pattern.length:\n        this._processSimple(pattern.join(\"/\"), index, cb);\n        return;\n\n      case 0:\n        // pattern *starts* with some non-trivial item.\n        // going to readdir(cwd), but not include the prefix in matches.\n        prefix = null;\n        break;\n\n      default:\n        // pattern has some string bits in the front.\n        // whatever it starts with, whether that's 'absolute' like /foo/bar,\n        // or 'relative' like '../baz'\n        prefix = pattern.slice(0, n).join(\"/\");\n        break;\n    }\n\n    const remain = pattern.slice(n);\n\n    // get the list of entries.\n    let read;\n    if (prefix === null) read = \".\";\n    else if (isAbsolute(prefix) || isAbsolute(pattern.join(\"/\"))) {\n      if (!prefix || !isAbsolute(prefix)) prefix = `/${prefix}`;\n      read = prefix;\n    } else read = prefix;\n\n    const abs = this._makeAbs(read);\n\n    //if ignored, skip _processing\n    if (childrenIgnored(this, read)) return cb();\n\n    const isGlobStar = remain[0] === minimatch.GLOBSTAR;\n    if (isGlobStar)\n      this._processGlobStar(prefix, read, abs, remain, index, inGlobStar, cb);\n    else this._processReaddir(prefix, read, abs, remain, index, inGlobStar, cb);\n  }\n\n  _processReaddir(prefix, read, abs, remain, index, inGlobStar, cb) {\n    const self = this;\n    this._readdir(abs, inGlobStar, (er, entries) =>\n      self._processReaddir2(\n        prefix,\n        read,\n        abs,\n        remain,\n        index,\n        inGlobStar,\n        entries,\n        cb\n      )\n    );\n  }\n\n  _processReaddir2(prefix, read, abs, remain, index, inGlobStar, entries, cb) {\n    // if the abs isn't a dir, then nothing can match!\n    if (!entries) return cb();\n\n    // It will only match dot entries if it starts with a dot, or if\n    // dot is set.  Stuff like @(.foo|.bar) isn't allowed.\n    const pn = remain[0];\n    const negate = !!this.minimatch.negate;\n    const rawGlob = pn._glob;\n    const dotOk = this.dot || rawGlob.charAt(0) === \".\";\n\n    const matchedEntries = [];\n    for (var i = 0; i < entries.length; i++) {\n      var e = entries[i];\n      if (e.charAt(0) !== \".\" || dotOk) {\n        let m;\n        if (negate && !prefix) {\n          m = !e.match(pn);\n        } else {\n          m = e.match(pn);\n        }\n        if (m) matchedEntries.push(e);\n      }\n    }\n\n    //console.error('prd2', prefix, entries, remain[0]._glob, matchedEntries)\n\n    const len = matchedEntries.length;\n    // If there are no matched entries, then nothing matches.\n    if (len === 0) return cb();\n\n    // if this is the last remaining pattern bit, then no need for\n    // an additional stat *unless* the user has specified mark or\n    // stat explicitly.  We know they exist, since readdir returned\n    // them.\n\n    if (remain.length === 1 && !this.mark && !this.stat) {\n      if (!this.matches[index]) this.matches[index] = Object.create(null);\n\n      for (var i = 0; i < len; i++) {\n        var e = matchedEntries[i];\n        if (prefix) {\n          if (prefix !== \"/\") e = `${prefix}/${e}`;\n          else e = prefix + e;\n        }\n\n        if (e.charAt(0) === \"/\" && !this.nomount) {\n          e = path.join(this.root, e);\n        }\n        this._emitMatch(index, e);\n      }\n      // This was the last one, and no stats were needed\n      return cb();\n    }\n\n    // now test all matched entries as stand-ins for that part\n    // of the pattern.\n    remain.shift();\n    for (var i = 0; i < len; i++) {\n      var e = matchedEntries[i];\n      let newPattern;\n      if (prefix) {\n        if (prefix !== \"/\") e = `${prefix}/${e}`;\n        else e = prefix + e;\n      }\n      this._process([e].concat(remain), index, inGlobStar, cb);\n    }\n    cb();\n  }\n\n  _emitMatch(index, e) {\n    if (this.aborted) return;\n\n    if (isIgnored(this, e)) return;\n\n    if (this.paused) {\n      this._emitQueue.push([index, e]);\n      return;\n    }\n\n    const abs = isAbsolute(e) ? e : this._makeAbs(e);\n\n    if (this.mark) e = this._mark(e);\n\n    if (this.absolute) e = abs;\n\n    if (this.matches[index][e]) return;\n\n    if (this.nodir) {\n      const c = this.cache[abs];\n      if (c === \"DIR\" || Array.isArray(c)) return;\n    }\n\n    this.matches[index][e] = true;\n\n    const st = this.statCache[abs];\n    if (st) this.emit(\"stat\", e, st);\n\n    this.emit(\"match\", e);\n  }\n\n  _readdirInGlobStar(abs, cb) {\n    if (this.aborted) return;\n\n    // follow all symlinked directories forever\n    // just proceed as if this is a non-globstar situation\n    if (this.follow) return this._readdir(abs, false, cb);\n\n    const lstatkey = `lstat\\0${abs}`;\n    const self = this;\n    const lstatcb = inflight(lstatkey, lstatcb_);\n\n    if (lstatcb) fs.lstat(abs, lstatcb);\n\n    function lstatcb_(er, lstat) {\n      if (er && er.code === \"ENOENT\") return cb();\n\n      const isSym = lstat && lstat.isSymbolicLink();\n      self.symlinks[abs] = isSym;\n\n      // If it's not a symlink or a dir, then it's definitely a regular file.\n      // don't bother doing a readdir in that case.\n      if (!isSym && lstat && !lstat.isDirectory()) {\n        self.cache[abs] = \"FILE\";\n        cb();\n      } else self._readdir(abs, false, cb);\n    }\n  }\n\n  _readdir(abs, inGlobStar, cb) {\n    if (this.aborted) return;\n\n    cb = inflight(`readdir\\0${abs}\\0${inGlobStar}`, cb);\n    if (!cb) return;\n\n    //console.error('RD %j %j', +inGlobStar, abs)\n    if (inGlobStar && !ownProp(this.symlinks, abs))\n      return this._readdirInGlobStar(abs, cb);\n\n    if (ownProp(this.cache, abs)) {\n      const c = this.cache[abs];\n      if (!c || c === \"FILE\") return cb();\n\n      if (Array.isArray(c)) return cb(null, c);\n    }\n\n    const self = this;\n    fs.readdir(abs, readdirCb(this, abs, cb));\n  }\n\n  _readdirEntries(abs, entries, cb) {\n    if (this.aborted) return;\n\n    // if we haven't asked to stat everything, then just\n    // assume that everything in there exists, so we can avoid\n    // having to stat it a second time.\n    if (!this.mark && !this.stat) {\n      for (let i = 0; i < entries.length; i++) {\n        let e = entries[i];\n        if (abs === \"/\") e = abs + e;\n        else e = `${abs}/${e}`;\n        this.cache[e] = true;\n      }\n    }\n\n    this.cache[abs] = entries;\n    return cb(null, entries);\n  }\n\n  _readdirError(f, er, cb) {\n    if (this.aborted) return;\n\n    // handle errors, and cache the information\n    switch (er.code) {\n      case \"ENOTSUP\": // https://github.com/isaacs/node-glob/issues/205\n      case \"ENOTDIR\": // totally normal. means it *does* exist.\n        const abs = this._makeAbs(f);\n        this.cache[abs] = \"FILE\";\n        if (abs === this.cwdAbs) {\n          const error = new Error(`${er.code} invalid cwd ${this.cwd}`);\n          error.path = this.cwd;\n          error.code = er.code;\n          this.emit(\"error\", error);\n          this.abort();\n        }\n        break;\n\n      case \"ENOENT\": // not terribly unusual\n      case \"ELOOP\":\n      case \"ENAMETOOLONG\":\n      case \"UNKNOWN\":\n        this.cache[this._makeAbs(f)] = false;\n        break;\n\n      default:\n        // some unusual error.  Treat as failure.\n        this.cache[this._makeAbs(f)] = false;\n        if (this.strict) {\n          this.emit(\"error\", er);\n          // If the error is handled, then we abort\n          // if not, we threw out of here\n          this.abort();\n        }\n        if (!this.silent) console.error(\"glob error\", er);\n        break;\n    }\n\n    return cb();\n  }\n\n  _processGlobStar(prefix, read, abs, remain, index, inGlobStar, cb) {\n    const self = this;\n    this._readdir(abs, inGlobStar, (er, entries) => {\n      self._processGlobStar2(\n        prefix,\n        read,\n        abs,\n        remain,\n        index,\n        inGlobStar,\n        entries,\n        cb\n      );\n    });\n  }\n\n  _processGlobStar2(prefix, read, abs, remain, index, inGlobStar, entries, cb) {\n    //console.error('pgs2', prefix, remain[0], entries)\n\n    // no entries means not a dir, so it can never have matches\n    // foo.txt/** doesn't match foo.txt\n    if (!entries) return cb();\n\n    // test without the globstar, and with every child both below\n    // and replacing the globstar.\n    const remainWithoutGlobStar = remain.slice(1);\n    const gspref = prefix ? [prefix] : [];\n    const noGlobStar = gspref.concat(remainWithoutGlobStar);\n\n    // the noGlobStar pattern exits the inGlobStar state\n    this._process(noGlobStar, index, false, cb);\n\n    const isSym = this.symlinks[abs];\n    const len = entries.length;\n\n    // If it's a symlink, and we're in a globstar, then stop\n    if (isSym && inGlobStar) return cb();\n\n    for (let i = 0; i < len; i++) {\n      const e = entries[i];\n      if (e.charAt(0) === \".\" && !this.dot) continue;\n\n      // these two cases enter the inGlobStar state\n      const instead = gspref.concat(entries[i], remainWithoutGlobStar);\n      this._process(instead, index, true, cb);\n\n      const below = gspref.concat(entries[i], remain);\n      this._process(below, index, true, cb);\n    }\n\n    cb();\n  }\n\n  _processSimple(prefix, index, cb) {\n    // XXX review this.  Shouldn't it be doing the mounting etc\n    // before doing stat?  kinda weird?\n    const self = this;\n    this._stat(prefix, (er, exists) => {\n      self._processSimple2(prefix, index, er, exists, cb);\n    });\n  }\n\n  _processSimple2(prefix, index, er, exists, cb) {\n    //console.error('ps2', prefix, exists)\n\n    if (!this.matches[index]) this.matches[index] = Object.create(null);\n\n    // If it doesn't exist, then just mark the lack of results\n    if (!exists) return cb();\n\n    if (prefix && isAbsolute(prefix) && !this.nomount) {\n      const trail = /[\\/\\\\]$/.test(prefix);\n      if (prefix.charAt(0) === \"/\") {\n        prefix = path.join(this.root, prefix);\n      } else {\n        prefix = path.resolve(this.root, prefix);\n        if (trail) prefix += \"/\";\n      }\n    }\n\n    if (process.platform === \"win32\") prefix = prefix.replace(/\\\\/g, \"/\");\n\n    // Mark this as a match\n    this._emitMatch(index, prefix);\n    cb();\n  }\n\n  // Returns either 'DIR', 'FILE', or false\n  _stat(f, cb) {\n    const abs = this._makeAbs(f);\n    const needDir = f.slice(-1) === \"/\";\n\n    if (f.length > this.maxLength) return cb();\n\n    if (!this.stat && ownProp(this.cache, abs)) {\n      let c = this.cache[abs];\n\n      if (Array.isArray(c)) c = \"DIR\";\n\n      // It exists, but maybe not how we need it\n      if (!needDir || c === \"DIR\") return cb(null, c);\n\n      if (needDir && c === \"FILE\") return cb();\n\n      // otherwise we have to stat, because maybe c=true\n      // if we know it exists, but not what it is.\n    }\n\n    let exists;\n    const stat = this.statCache[abs];\n    if (stat !== undefined) {\n      if (stat === false) return cb(null, stat);\n      else {\n        const type = stat.isDirectory() ? \"DIR\" : \"FILE\";\n        if (needDir && type === \"FILE\") return cb();\n        else return cb(null, type, stat);\n      }\n    }\n\n    const self = this;\n    const statcb = inflight(`stat\\0${abs}`, lstatcb_);\n    if (statcb) fs.lstat(abs, statcb);\n\n    function lstatcb_(er, lstat) {\n      if (lstat && lstat.isSymbolicLink()) {\n        // If it's a symlink, then treat it as the target, unless\n        // the target does not exist, then treat it as a file.\n        return fs.stat(abs, (er, stat) => {\n          if (er) self._stat2(f, abs, null, lstat, cb);\n          else self._stat2(f, abs, er, stat, cb);\n        });\n      } else {\n        self._stat2(f, abs, er, lstat, cb);\n      }\n    }\n  }\n\n  _stat2(f, abs, er, stat, cb) {\n    if (er && (er.code === \"ENOENT\" || er.code === \"ENOTDIR\")) {\n      this.statCache[abs] = false;\n      return cb();\n    }\n\n    const needDir = f.slice(-1) === \"/\";\n    this.statCache[abs] = stat;\n\n    if (abs.slice(-1) === \"/\" && stat && !stat.isDirectory())\n      return cb(null, false, stat);\n\n    let c = true;\n    if (stat) c = stat.isDirectory() ? \"DIR\" : \"FILE\";\n    this.cache[abs] = this.cache[abs] || c;\n\n    if (needDir && c === \"FILE\") return cb();\n\n    return cb(null, c, stat);\n  }\n}\n\nfunction readdirCb(self, abs, cb) {\n  return (er, entries) => {\n    if (er) self._readdirError(abs, er, cb);\n    else self._readdirEntries(abs, entries, cb);\n  };\n}\n"],"names":["isWindows","process","platform","DEBUG","env","NODE_DEBUG","test","nextPartRe","splitRootRe","p","cache","pathModule","resolve","Object","prototype","hasOwnProperty","call","pos","current","base","previous","original","seenLinks","knownHard","start","m","exec","length","fs","lstatSync","lastIndex","result","resolvedLink","stat","isSymbolicLink","linkTarget","id","dev","toString","ino","statSync","readlinkSync","slice","cb","callback","backtrace","Error","err","message","missingCallback","throwDeprecation","noDeprecation","msg","stack","traceDeprecation","console","trace","error","rethrow","nextTick","bind","lstat","LOOP","gotResolvedLink","gotStat","gotTarget","readlink","target","realpath","sync","realpathSync","monkeypatch","unmonkeypatch","origRealpath","origRealpathSync","version","ok","newError","er","syscall","code","old","isArray","Array","xs","balanced","a","b","str","RegExp","maybeMatch","r","range","end","pre","body","post","reg","match","begs","beg","left","right","ai","indexOf","bi","i","push","pop","substr","expand","isTop","expansions","n","isNumericSequence","isAlphaSequence","isSequence","isOptions","escClose","split","parseCommaParts","parts","postParts","shift","apply","map","embrace","N","x","numeric","y","width","Math","max","incr","abs","lte","gte","pad","some","isPadded","c","String","fromCharCode","need","z","join","fn","res","concatMap","j","k","expansion","escSlash","escOpen","escComma","escPeriod","escapeBraces","unescapeBraces","random","parseInt","charCodeAt","el","minimatch","Minimatch","path","sep","require$$0","GLOBSTAR","plTypes","!","open","close","?","+","*","@","qmark","star","reSpecials","reduce","set","slashSplit","ext","t","keys","forEach","pattern","options","TypeError","nocomment","charAt","trim","this","regexp","negate","comment","empty","make","braceExpand","nobrace","filter","list","defaults","def","orig","debug","_made","parseNegate","globSet","globParts","s","si","parse","negateOffset","nonegate","l","isSub","noglobstar","stateChar","re","hasMagic","nocase","escaping","patternListStack","negativeLists","inClass","reClassStart","classStart","patternStart","dot","self","clearStateChar","len","noext","type","reStart","pl","reEnd","sp","cs","substring","SUBPARSE","tail","replace","_","$1","$2","addPatternStart","nl","nlBefore","nlFirst","nlLast","nlAfter","openParensBefore","cleanAfter","dollar","flags","regExp","_glob","_src","makeRe","twoStar","ex","mm","f","nonull","partial","filename","file","matchBase","matchOne","flipNegate","fi","pi","fl","hit","fr","pr","swallowee","toLowerCase","module","create","ctor","superCtor","super_","constructor","value","enumerable","writable","configurable","TempCtor","posix","win32","device","isUnc","Boolean","ownProp","obj","field","const","alphasorti","localeCompare","alphasort","ignoreMap","gmatcher","gpattern","matcher","setopts","includes","silent","strict","realpathCache","follow","mark","nodir","nounique","nosort","noprocess","absolute","maxLength","Infinity","statCache","symlinks","ignore","setupIgnores","changedCwd","cwd","root","cwdAbs","isAbsolute","makeAbs","nomount","finish","nou","all","matches","literal","sort","_mark","e","notDir","isIgnored","found","isDir","slash","mabs","childrenIgnored","globSync","GlobSync","common","arguments","let","_process","_finish","assert","matchset","index","_makeAbs","rp","inGlobStar","prefix","_processSimple","read","remain","_processGlobStar","_processReaddir","entries","_readdir","pn","dotOk","matchedEntries","concat","_emitMatch","_stat","_readdirInGlobStar","isSym","isDirectory","_readdirEntries","readdirSync","_readdirError","remainWithoutGlobStar","gspref","noGlobStar","instead","below","exists","trail","needDir","wrappy","wrapper","args","ret","once","onceStrict","called","onceError","name","proto","defineProperty","Function","reqs","key","RES","cbs","array","splice","makeres","glob","Glob","options_","origin","add","extend","inherits","EE","_didRealPath","on","_processing","_emitQueue","_processQueue","paused","done","aborted","_didRealpath","_realpath","emit","_realpathSet","next","real","abort","pause","resume","eq","pq","_processReaddir2","st","lstatcb","inflight","readdir","readdirCb","_processGlobStar2","_processSimple2","undefined","statcb","_stat2"],"mappings":"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"}